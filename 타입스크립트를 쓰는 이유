타입스크립트의 등장
 

웹 개발의 세계는 빠르게 진화하고 있으며,

그 과정에서 개발자들은 더욱 견고하고 유지 보수가 좋은 코드를 작성하기 위해 다양한 도구와 언어를 찾게 된다.

과거부터 자바스크립트는 유연성과 보편성 덕분에 웹 개발의 핵심 언어로 자리 잡았지만

개발 과정에서 타입과 관련된 오류를 런타임 시점에서 발견하게 되는 경우가 대부분이었는데,

 

이러한 문제점을 해결하기 위해 등장한 것이 바로 TypeScript이다.

 

타입스크립트는 마이크로소프트에 의해 2012년 10월에 처음 공개되었다.

js에 정적 타입 체킹을 추가함으로써 개발자가 코드 작성 시점에 타입 오류를 발견할 수 있도록 도와주는 TS는 런타임 오류를 줄이고 코드의 신뢰성을 크게 높이는 데 기여함으로써 점차 많은 개발자들이 TS를 사용하기 시작했다.

 

특히 앵귤러, 릭액트, 뷰 같은 프레임워크와의 결합 또한 문제없이 잘 이루어지기 때문에 많은 개발자들은 자바스크립트 대산 타입스크립트를 선택하고 있다.

 

오늘은 js의 문제를 해결하기 위해 등장한 TS에 대해서 대표적으로 어떤 이점이 있는지 구체적인 예시와 함께 알아볼 예정이다.

 

타입 체킹
 

 

자바스크립트(JS)
 

자바스크립트는 동적 타입 언어이기 때문에, 변수에 할당된 값이 언제든지 다른 타입으로 변경될 수 있다. 이는 유연하지만, 예기치 않은 그리고 개발자가 의도하지 않은 오류를 발생시킬 수 있다.

몇가지 예를 통해 알아보자

 

function add(a, b) {
  return a + b;
}

console.log(add(5, 10)); // 15
console.log(add(5, "10")); // "510" (문자열로 반환됨)
console.log(add("hello", "world")); //"helloworld"
console.log(add(3, 4, 5)); // 7

위 코드 실행 결과
개발자가0 정수 계산을 위해 위와같은 add 함수를 만들었다고 해보자.

첫번째 경우에서는 제대로된 값을 반환하겠지만

두번째 경우부터 사용자의 의도와 다른 결과들이 반환된다.

먼저 두번째 경우 사용자가 정수 5와 문자열 10을 입력하게 된다면  add 함수는 문자열 510을 반환하게 된다.

세번째 경우 hello와 world 두 문자열을 입력할 경우 helloworld라는 결과가 나오게 될것이다.

네번째 경우에는 인수가 하나 더 추가되었지만 5는 무시된 채 3+4의 결과인 7이 반환될 것이다.

 

이 처럼 사용자들이 개발자의 의도와 다르게 여러 경우들을 추가했지만

js에서는 아무런 경고조차 주지 않은 채 그대로 결과를 출력하게 된다.

 

타입스크립트(TS)
타입스크립트의 경우에는 어떨까?

 

function add(a: number, b: number): number {
  return a + b;
}

// 올바른 사용 예시
console.log(add(5, 10)); // 15

// 오류 발생 예시들 (타입스크립트에서 컴파일 오류 발생)
console.log(add(5, "10")); // 오류: 'string' 형식의 인수는 'number' 형식의 매개 변수에 할당될 수 없습니다..
console.log(add("hello", "world")); // 오류: 'string' 형식의 인수는 'number' 형식의 매개 변수에 할당될 수 없습니다..
console.log(add(3, 4, 5)); // 오류 : 2개의 인수가 필요한데 3개를 가져왔습니다.
 

타입스크립트 경우에는 

자바스크립트에서 집어주지 않았던 오류들이 화면에서 보이고
 

타입스크립트는 컴파일 시점에 발생한 오류를 메시지와 함께 개발자에게 알려준다. 이를 통해 예상치 못한 오류를 미리 발견하고 수정할 수 있어, 더욱 견고한 코드를 작성할 수 있다.

 

이처럼 타입스크립트는 코드의 타입을 명확히 정의하고, 잘못된 타입의 데이터를 처리할 때 발생할 수 있는 오류를 사전에 방지하여, 안전하고 신뢰할 수 있는 코드 베이스를 유지할 수 있게 도와준다.

 

그 외 장점들
 

이처럼 타입스크립트는 타입체킹이라는 js에서는 있지 않았던 핵심 장점이 있는데

그 외에도 타입스크립트의 장점들을 알아보자.

 

1. 향상된 코드 품질과 유지보수성
먼저 타입스크립트는 코드를 작성할 때 타입을 명시적으로 지정하므로 코드의 의도를 명확하게 표현할 수 있다.

(ts에서는 python에서 처럼 타입 추론이 가능하지만 그럼에도 명시적으로 타입을 적어주는 편이 좋다.)

2. 강력한 IDE 지원과 코드 자동 완성
타입스크립트는 정적 타입 정보를 제공하기 때문에, 개발자가 사용하는 IDE에서 코드 자동 완성, 코드 네비게이션, 리팩토링 지원 등이 훨씬 더 강력하게 제공된다. 흔히들 쓰는 VS-Code에서도 더 강력한 확장 프로그램들과 네비게이션등이 제공됨을 알 수 있다. 이는 개발 생산성을 크게 향상시키고, 코드 작성 시 실수를 줄 일 수 있게 도와준다.

 

3. 점진적 전환 가능
타입스크립트는 자바스크립트의 상위 집합이기 때문에 기존 자바스크립트 프로젝트에 점진적으로 도입이 가능하다.

코드베이스의 일부를 타입스크립트로 변환하거나, 새로운 파일을 타입스크립트로 작성하고, 나머지 코드는 기존 자바스크립트로 유지해도 문제가 없다. 이 덕분에 기존 프로젝트에서도 큰 무리 없이 타입스크립트로 전환이 가능하다.

4. 자바스크립트 생태계와의 완벽한 호환성
타입스크립트는 자바스크립트로 컴파일되기 때문에, 기존 js 라이브러리 및 프레임워크와 완벽하게 호환이 가능하다. 이는 js 생태계에서 사용할 수 있는 모든 도구와 라이브러리를 ts 프로젝트에서도 사용할 수 있음을 의미한다.

5.클래스 기반 객체지향 프로그래밍  지원
ts는 클래스 기반 객체지향 프로그래밍을 지원한다. 기존 js에서도 클래스 문법(유명무실)을 사용할 수 있지만 ts에서는 그보다 더 나은 타입 시스템과 접근 제한자 등을 제공하여 보다 구조적이고 명확한 oop 설계를 할 수 있게 돕는다.

 

이 모든 장점들이 합쳐져 타입스크립트는 견고하고 유지보수하기 쉬운 대규모 애플리케이션을 개발하는 데 있어서 필수적인 도구로 자리 잡고 있다.


