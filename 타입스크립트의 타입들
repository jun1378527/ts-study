이번에는 타입스크립트에서 지원하는 타입들을 알아보자

 

타입스크립트에서는 다양한 데이터 타입을 지원하는데 이러한 데이터 타입은 크게 기본 데이터 타입, 객체 타입, 특수 타입으로 나눌 수 있다.

 

기본 데이터 타입
1. Number
number 타입은 숫자를 나타내며, 정수와 실수를 모두 포함한다.

let integer: number = 10; // 정수
let float: number = 3.14; // 실수

// 예제
function multiply(a: number, b: number): number {
  return a * b;
}

console.log(multiply(2, 3)); // 6
2. String
string 타입은 문자열을 나타낸다.

let greeting: string = "Hello, World!";

// 예제
function greet(name: string): string {
  return `Hello, ${name}!`;
}

console.log(greet("Alice")); // Hello, Alice!
3. Boolean
boolean 타입은 논리값을 나타내며, true 또는 false를 가진다.

let isDone: boolean = false;

// 예제
function isAdult(age: number): boolean {
  return age >= 18;
}

console.log(isAdult(20)); // true
console.log(isAdult(15)); // false
4. Null
null 타입은 값이 없음을 나타내며. null은 주로 값이 비어있음을 명시적으로 표현하기 위해 사용된다.

let emptyValue: null = null;

// 예제
function getNullValue(): null {
  return null;
}

console.log(getNullValue()); // null
5. Undefined
undefined 타입은 값이 할당되지 않은 변수를 나타낸다. 변수 선언 후 값을 할당하지 않으면 기본적으로 undefined가 할당된다.

let notAssigned: undefined = undefined;

// 예제
function getUndefinedValue(): undefined {
  return undefined;
}

console.log(getUndefinedValue()); // undefined
 
 
객체 타입
1. Object
object 타입은 객체를 나타낸다. 객체는 키-값 쌍으로 이루어진 데이터 구조이다.

let person: { name: string; age: number } = { name: "John", age: 25 };

// 예제
function printPerson(person: { name: string; age: number }): void {
  console.log(`Name: ${person.name}, Age: ${person.age}`);
}

printPerson({ name: "Alice", age: 30 }); // Name: Alice, Age: 30
2. Array
array 타입은 동일한 타입의 요소들을 가진 배열을 나타낸다.

let numbers: number[] = [1, 2, 3, 4, 5];
let strings: string[] = ["one", "two", "three"];

// 예제
function sumArray(numbers: number[]): number {
  return numbers.reduce((acc, num) => acc + num, 0);
}

console.log(sumArray([1, 2, 3, 4])); // 10
3. Tuple
tuple 타입은 각 요소가 다른 타입을 가질 수 있는 배열을 나타낸다. 이는 타입스크립트에서 만 제공된다.

let tuple: [string, number] = ["Alice", 30];

// 예제
function printTuple(tuple: [string, number]): void {
  console.log(`Name: ${tuple[0]}, Age: ${tuple[1]}`);
}

printTuple(["Bob", 25]); // Name: Bob, Age: 25
 
 
특수 타입
1. Any
any 타입은 어떤 타입이든 할당할 수 있는 타입이다. 주로 타입을 미리 알 수 없거나, 타입 체킹을 피하고 싶을 때 사용된다.

let anything: any = 42;
anything = "A string";
anything = true;

// 예제
function logAny(value: any): void {
  console.log(value);
}

logAny(42); // 42
logAny("Hello"); // Hello
logAny(true); // true
2. Unknown
unknown 타입은 any와 유사하지만, 보다 안전하게 사용할 수 있는 타입이다. unknown 타입의 값은 사용하기 전에 반드시 타입 검사를 거쳐야 한다.

let unknownValue: unknown = 10;

// 예제
function logUnknown(value: unknown): void {
  if (typeof value === "string") {
    console.log("It's a string:", value);
  } else if (typeof value === "number") {
    console.log("It's a number:", value);
  } else {
    console.log("Unknown type:", value);
  }
}

logUnknown(unknownValue); // It's a number: 10
logUnknown("Hello"); // It's a string: Hello
3. Never
never 타입은 절대 발생하지 않는 값의 타입을 나타낸다. 주로 함수가 예외를 던지거나 무한 루프에 빠져 반환하지 않을 때 사용된다.

// 가능한 모든 케이스를 처리했는지 보장하기 위해 'never'을 활용할 수 있음
type APIStatus = "loading" | "success" | "error";

function handleAPIStatus(status: APIStatus): string {
  switch (status) {
    case "loading":
      return "Loading data...";
    case "success":
      return "Data loaded successfully!";
    case "error":
      return "Failed to load data.";
    default:
      // 여기에 도달하는 경우는 이론적으로 불가능해야 합니다.
      // 만약 이 상태에 도달한다면, APIStatus 타입이 수정되었지만
      // switch 문에서 새로운 상태를 처리하지 않은 것입니다.
      const exhaustiveCheck: never = status;
      throw new Error(`Unhandled API status: ${status}`);
  }
}
// 아래 예제는 서버가 정상적으로는 무한 루프를 돌며 계속 실행되며, 특정 조건의 경우에서만 종료되는 상황을 나타냄
// 정상적인 상황에서는 절대 반환되지 않는다는 것을 never 을 써서 명시함
function startServer(): never {
  while (true) {
    const shutdownSignal = checkForShutdownSignal();

    if (shutdownSignal) {
      console.log("Shutdown signal received. Stopping server...");
      // 예외적인 종료
      break;
    }

    handleRequest(); // 서버는 계속 요청을 처리
  }

  // 여기서 함수는 종료되지 않음, never가 아닌 다른 타입으로 반환해야 함
  throw new Error("Server stopped unexpectedly");
}

function checkForShutdownSignal(): boolean {
  // 종료 신호가 있는지 체크하는 함수
  // 실제로는 이 함수가 외부 신호를 체크하거나, 특정 조건을 확인할 수 있음
  return false;
}

function handleRequest() {
  console.log("Handling request...");
  // 실제 요청 처리 로직
}
 

타입 추론
 

타입스크립트는 기본적으로 타입 추론이 가능하다.

타입 추론은 개발자가 타입을 명시적으로 지정하지 않아도, 타입스크립트 컴파일러가 코드의 문맥을 바탕으로 변수나 함수의 타입을 자동으로 결정하는 것을 의미한다.

let x = 10; // 타입스크립트는 x의 타입을 number로 추론
예를 들어 위와 같은 경우 타입스크립트는 x 의 타입을 명시해주지 않아도 자동으로 number라고 타입을 추론한다.

function add(a: number, b: number) {
  return a + b; // 타입스크립트는 반환 타입을 number로 추론
}
위와 같은 경우에서도 a + b 는 반환 타입을 number라고 추론하게 된다.

let numbers = [1, 2, 3]; // 타입스크립트는 numbers의 타입을 number[]로 추론
배열도 요소를 기반으로 배열의 타입을 추론 할 수 잇다.

 

타입스크립트의 타입 추론은 모든 경우에 완벽하게 작동하지 않을 수 있다. 특히, 복잡한 함수나 객체에서 발생하는 타입 추론에는 한계가 있을 수 있다.

또한 유지보수와 가독성을 위해 웬만한 경우에는 명시적으로 타입을 지정해주는 것이 코드의 의도를 분명하게 전달할 수 있기에 대부분의 경우에는 타입을 명시해 주는 편이 좋다.